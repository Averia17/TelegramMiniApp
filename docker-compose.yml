services:
  frontend:
    container_name: "frontend"
    image: "frontend"
    build:
        context: ./frontend
        dockerfile: Dockerfile
    working_dir: "/home/node/app"
#    Development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/home/node/app
      - /home/node/app/node_modules # remove node_modules from synchronization
    command: ["npm", "run", "dev", "--host"]

#    Production
#    volumes:
#      - /var/app/miniapp:/home/node/app/dist
#    command: ["npm", "run", "build"]

    stop_signal: SIGINT
    depends_on:
      - webhook

  bot:
    container_name: "bot"
    image: "bot"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./bot.Dockerfile
    volumes:
      - ./backend/src:/src/  # Volume for bot code
      - /var/app/miniapp:/src/public # Volume for static files, that are shared between bot and frontend
    restart: always

    env_file:
      - ".env"

    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  pg_database:
    container_name: "pg_database"
    image: postgres:13-alpine
    ports:
      - "5452:5432" # Change if you like! 5439 is external to container
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: "postgres -c max_connections=150 -c shared_buffers=512MB -c effective_cache_size=1536MB -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200 -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2 -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  nginx:
    container_name: "nginx"
    image: "nginx"
    build:
      context: nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - /var/app/miniapp:/src/public
    depends_on:
      - webhook
      - frontend
  webhook:
    container_name: "webhook"
    image: "webhook"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./web.Dockerfile
    ports:
      - "3779:8000"
    volumes:
      - ./backend/src:/src
    restart: always
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    depends_on:
      - pg_database

  redis_cache:
    container_name: "redis_cache"
    image: redis:6.2-alpine
    restart: always
    command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    env_file:
      - ".env"
    volumes:
      - cache:/data

  shop_db:
    container_name: "shop_db"
    image: postgres:13-alpine
    ports:
      - "5555:5432"
    restart: always
    volumes:
      - shop_db_data:/var/lib/postgresql/data
    command: "postgres -c max_connections=150 -c shared_buffers=512MB -c effective_cache_size=1536MB -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200 -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2 -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  shop_api:
    container_name: "shop_api"
    image: "shop_api"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./shop.Dockerfile
    ports:
      - "8888:8000"
    volumes:
      - ./backend/src/shop_service:/src
    restart: always
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    depends_on:
      - shop_db
#  mkdocs:
#    build:
#      context: mkdocs
#      dockerfile: Dockerfile
#    container_name: "mkdocs_container"
##    ports:
##      - "3780:8000"
#    volumes:
#      - ./mkdocs:/usr/src/mkdocs
#      - /var/app/mkdocs/public_docs:/usr/src/mkdocs/public_docs

#  ngrok:
#    image: ngrok/ngrok:latest
#    restart: unless-stopped
#    environment:
#      - NGROK_CONFIG=/etc/ngrok.yml
#    volumes:
#      - ./ngrok.yml:/etc/ngrok.yml
#    expose:
#      - 443


volumes:
  pgdata: { }
  shop_db_data: { }
  cache: { }